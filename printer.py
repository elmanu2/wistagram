#!/usr/bin/python
# -*- coding: utf-8 -*-
from PIL import Image
import popen2
import os
import math

from classes.photo import Photo
from classes.printFormat import PrintFormat
from conversion import *
from compositing import *

#Selphy CP 910 : 10x15cm
#                3,93701 x 5,90551 inches
#Format Instagram : 612 x 612 / 1080 x 1080
#PPI pour remplir 10cm -> 612 / 3,93701 -> 155
#                      -> 1080 / 3,93701 -> 274


def getImmediateSubdirectories(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

def userSelectionInArray(subDirArray):
    selection = -1
    while ( (selection < 0) or (selection >= len(subDirArray))):
        for idx, val in enumerate(subDirArray):
            print"[%d -> %s]" %(idx,val)

        userSelection = raw_input()
        selection =  int(float(userSelection))
    return selection

def listScreenShotFiles(inputDir):
    filelist=os.listdir(inputDir)
    for fichier in filelist[:]: # filelist[:] makes a copy of filelist.
        #Remove files which are not jpeg files
        if not(fichier.endswith(".jpg")):
            filelist.remove(fichier)
        #Remove files which have been generated by this script
        elif "print" in fichier:
            filelist.remove(fichier)
        #Remove files which have been generated by this script
        elif "template" in fichier:
            filelist.remove(fichier)
        elif "python" in fichier:
            filelist.remove(fichier)


    #print(filelist)
    return filelist





#print command : lpr -P Canon_CP900 -o media="Postcard(4x6in)" [filepath]
#print center
def printCommand(filename):
    cmd = "lpr -P Canon_CP900 -o media=\"Postcard(4x6in)\" " + filename
    print "Command : %s" %cmd
    res = popen2.popen4(cmd)

def main():

    #CONFIGURATION
    #The root directory
    inputDir = "/Users/manu/Desktop/wistiti/"
    #The template
    templateFile = "./resources/test/template/COR-MARS16_elements-template-gimp.jpg"
    marginColor = (84,158,167)
    printMargin = 30
    templateMargin = 60
    #The printer
    #Create a post card print format (Selphy CP900)
    #paper : 100x148mm
    printFormat = PrintFormat.SelphyCP900(dpiStretch=True)
    printFormat.setPrinterMargin(-1,-1,"mm")


    #Add a margin on the template (add new pixel for printer margin)
    templateFile = addMarginOnTemplate(templateFile,printMargin,marginColor=marginColor)

    #Get the subdirectories of inputdir
    subDirArray = getImmediateSubdirectories(inputDir)

    #User choose the subdirectory
    userIndexSelection = userSelectionInArray(subDirArray)
    inputDir = os.path.join(inputDir,subDirArray[userIndexSelection])
    #Get the images list (jpg)
    files = listScreenShotFiles(inputDir)

    #Display information for user
    print "********************************"
    print "%s files found" %(len(files))
    print files
    print "********************************"

    userInput = ""
    index = 0
    while(userInput != "q"):
        #Open the picture image
        filepath = os.path.join(inputDir,files[index])
        (filepathWithoutExtension,extension) = os.path.splitext(filepath)

        #fileOutput = filepathWithoutExtension + "-python" + extension
        #print filepathWithoutExtension
        #print extension
        #print fileOutput

        #Add a photo on the template
        photoPath = addPhotoOnTemplate(filepath,templateFile,margin=templateMargin)
        im = Image.open(photoPath)

        exif_data = im._getexif()
        #print im.info
        #print exif_data
        photo = Photo(im.size[0],im.size[1])
        photo.computePpmm(printFormat)
        print "********************************"
        print "File %s on %s : %s" %(index+1,len(files),files[index])
        print photo
        fileOutput = generateFilepathWithSuffix(photoPath,"-CP900-print")
        im.save(fileOutput, 'jpeg', dpi = (photo.ppiX,photo.ppiY))
        im2 = Image.open(fileOutput)

        #User choose the action
        userInput = raw_input("Print? print/next/display/quit [p/n/d/q]")
        #print "Resultat %s" % userInput
        if userInput == "p":


            print im2.info
            printCommand(fileOutput)
            print "WARNING : YOU CAN PRINT THE SAME IMAGE"
        elif userInput == "n":
            print "Next picture"
            index += 1
        elif userInput == "d":
            print "Display"
            im.show()
        elif userInput == "q":
            print "Quit"
        else :
            print "Unknown command"

        if(index >= len(files)):
            userInput = "q"
            print "No more picture, quit..."

if __name__ == "__main__":
    main()

